<?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Carbon\Carbon;
use Illuminate\Support\Facades\Artisan;

class EventTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    use DatabaseTransactions;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Artisan::call('migrate:refresh');
        Artisan::call('db:seed');
    }

    public function test_create_event()
    {
        $data = [
            'name' => 'testCase',
            'location' => 'testCase',
            'start_time' => Carbon::parse('2000-12-31 23:59:59')->format('Y-m-d H:i:s'),
            'end_time' => Carbon::parse('2000-12-31 23:59:59')->format('Y-m-d H:i:s'),
            'category' => 'testCase',
            'description' => 'testCase',
            'owner_id' => '4'
        ];
        $response = $this->call('POST', "api/event", $data);
        $this->assertEquals('201 Event created successfully', $response->status() . ' ' . $response->getContent());
    }

    public function test_get_users()
    {
        $this->json('GET', "api/members/24")->seeStatusCode(200)->decodeResponseJson();
    }

    public function test_update_event()
    {
        $data = [
            'id' => '24',
            'name' => 'testCaseUpdate',
            'location' => 'testCaseUpdate',
            'start_time' => Carbon::parse('2010-12-31 00:00:00')->format('Y-m-d H:i:s'),
            'end_time' => Carbon::parse('2010-12-31 00:00:00')->format('Y-m-d H:i:s'),
            'category' => 'testCaseUpdate',
            'description' => 'testCaseUpdate',
            'owner_id' => '4'
        ];
        $response = $this->call('POST', "api/event/update", $data);
        $this->assertEquals('200 Event updated successfully', $response->status() . ' ' . $response->getContent());
    }

    public function test_get_all_events()
    {
        $this->json('GET', "api/event/0/ASC")->seeStatusCode(200)->decodeResponseJson();
    }

    public function test_leave_event()
    {
        $response = $this->call('DELETE', "api/event/2/25");
        $this->assertEquals('200 User with id 2 left event with id 25', $response->status() . ' ' . $response->getContent());
    }

}
